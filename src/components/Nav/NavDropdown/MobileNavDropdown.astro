---
import { Icon } from "astro-icon";

// components
import NavLink from "@components/Nav/NavLink.astro";

// data
import { type navDropdownItem } from "@config/navData.json";

interface Props {
  navItem: navDropdownItem;
}

const { navItem } = Astro.props as Props;
---

<div class="mobile-nav__dropdown group relative w-full">
  <button
    class="primary-focus mobile-nav__dropdown-button w-full gap-1 py-1 pl-4 text-base-900 transition hover:text-base-700 dark:text-base-200/90 dark:hover:text-base-50 md:hidden md:px-4"
    type="button"
    id={`${navItem.text} mobile dropdown menu`}
    aria-expanded="false"
    aria-haspopup="true"
    aria-controls={`${navItem.text} mobile dropdown menu content`}
  >
    <div class="flex items-center justify-start gap-1">
      {navItem.text}
      <Icon
        name="tabler:chevron-down"
        aria-hidden="true"
        class="mobile-nav__dropdown-chevron h-6 w-6 transition-transform"
      />
    </div>
  </button>

  <div
    id={`${navItem.text} mobile dropdown menu content`}
    aria-labelledby={`${navItem.text} mobile dropdown menu`}
    class="mobile-nav__dropdown-content mt-1 hidden max-h-0 w-full min-w-[150px] overflow-hidden transition-all duration-300 ease-in-out"
  >
    <ul class="mb-2 ml-4 transition-[height]">
      {
        navItem.dropdown.map((dropdownItem) => (
          <NavLink navItem={dropdownItem} />
        ))
      }
    </ul>
  </div>
</div>

<script>
  function mobileNavDropdownSetup() {
    const dropdownMenus = document.querySelectorAll(
      ".mobile-nav__dropdown",
    ) as NodeListOf<HTMLElement>;
    dropdownMenus.forEach((dropdownMenu) => {
      const dropdownButton = dropdownMenu.querySelector(
        ".mobile-nav__dropdown-button",
      ) as HTMLElement;
      const dropdownChevron = dropdownMenu.querySelector(
        ".mobile-nav__dropdown-chevron",
      ) as HTMLElement;
      const dropdownContent = dropdownMenu.querySelector(
        ".mobile-nav__dropdown-content",
      ) as HTMLElement;

      if (dropdownButton && dropdownContent && dropdownChevron) {
        dropdownButton.addEventListener("click", (event) => {
          if (!dropdownMenu.classList.contains("active")) {
            // if dropdown is currently closed, so open it
            dropdownMenu.classList.add("active");
            dropdownButton.setAttribute("aria-expanded", "true");

            // set max-height to the height of the dropdown content
            // this makes it animate properly
            dropdownContent.classList.remove("hidden");
            dropdownContent.style.maxHeight =
              dropdownContent.scrollHeight + "px";
            dropdownChevron.classList.add("rotate-180");
          } else {
            // dropdown is currently open, so close it
            dropdownMenu.classList.remove("active");
            dropdownButton.setAttribute("aria-expanded", "false");

            // set max-height to the height of the dropdown content
            // this makes it animate properly
            dropdownContent.style.maxHeight = "0px";
            dropdownChevron.classList.remove("rotate-180");
            // delay to allow close animation
            setTimeout(() => {
              dropdownContent.classList.add("hidden");
            }, 300);
          }
          event.preventDefault();
          return false;
        });
      }
    });
  }

  // runs on initial page load
  mobileNavDropdownSetup();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", mobileNavDropdownSetup);
</script>
